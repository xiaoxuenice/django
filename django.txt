django 3.0不需要使用pymysql,/demo/__init__.py中删除内容

导出app数据 python3 manage.py dumpdata blog > a.json
导入app数据 python3 manage.py loaddata a.json
导出用户数据 python3 manage.py dumpdata auth > auth.json
yum install -y mysql-devel gcc gcc-devel python-devel
pip install mysqlclient==1.4.2

pip3 install pymysql
pip3 install django
pip3 install gevent
pip3 install gunicorn
pip3 install Pillow

django-admin startproject   django	#创建django项目
cd django
python3 manage.py  startapp  app	#创建APP
python3 manage.py createsuperuser	#创建管理员	
python3 manage.py makemigrations	
python3 manage.py migrate			#生成迁移文件   #应用到数据库(两个一起执行)
python3 manage.py migrate --fake	#如果迁移不成功
mkdir templates  static				#创建index 和 静态文件
----------------------------------------------------------
vim settings.py
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'python',
        'USER': 'root',
        'PASSWORD':'Pwd@123456',
        'HOST':'192.168.116.200',
        'PORT':'3306',
	INSTALLED_APPS = ['app']							#添加app
	'DIRS': [os.path.join(BASE_DIR,'templates')],	    #添加模块
	ALLOWED_HOSTS = ['*']   #允许所有用户访问
	LANGUAGE_CODE = 'zh-hans'
	TIME_ZONE = 'Asia/Shanghai'
	USE_TZ = False
	STATIC_URL = '/static-file/'       #面向用户展示
	STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static'),   #html中相对static下引入相对路径
	]
vim __init__.py
import  pymysql
pymysql.install_as_MySQLdb()
##########################################             QuerySet API                          #############################
vim blog/models.py   								#新建模型
class Article(models.Model):
    name = models.CharField(max_length=50,verbose_name="名字")
    qq = models.CharField(max_length=10)
    addr = models.TextField(verbose_name="地址")
    email = models.EmailField()
    class Meta:
      verbose_name = '作者'
      verbose_name_plural = '作者'
	def __str__(self):
        return self.name
		
vim blog/admin.py                               #模型加入admin后台
from django.contrib import admin
from .models import  *
admin.site.register(Author)	

python3 manage.py makemigrations	
python3 manage.py migrate                       #生成，迁移到数据库
						
-----------------------------------------------------------------------------------------------------------------------------
python3 manager.py shell
from .models import Article
模型新建对象方法：
Article.objects.create(name=name,age=age)        

模型查询获取对象方法：	
Article.objects.all()[:10]  	  				 #获取所有<<<<<返回直接.引用      for循环>>>>>
Article.objects.values('name','qq')              #根据表键<<<<<返回列表里的字典   for循环>>>>>
Article.objects.values_list('name','qq')         #获取元组形式结果(浪费内存)
Article.objects.values_list('name',flat=True)    #列表形式
Article.objects.get(name="xiaoxue",age="22",id=1)#获取单个
Article.objects.get(pk=1)						#按照行查询
Article.objects.get_or_create(name="WZT", age=23)#防止重复
Article.objects.filter(name="xiaoxue")   		#获取值  <<<<<需要for循环>>>>>
Article.objects.filter(name__contains="abc")  	#名称中包含 "abc"的人
Article.objects.filter(name__icontains="abc") 	#名称中包含"abc"，且abc不区分大小写
Article.objects.filter(name__regex="^abc") 		#正则表达式查询
Article.objects.filter(name__iregex="^abc")  	#正则表达式不区分大小写
Article.objects.exclude(name__contains="WZ")  	#排除包含 WZ 的Article对象
Article.objects.filter(name__contains="abc").exclude(age=23)  #找出名称含有abc, 但是排除年龄是23岁的
Author.objects.filter(qq='3322213124').values("name")        #查看qq为3322值的名字 
Article.objects.filter(name="tom").values_list('qq',flat=True)       #查看名为tom的文章有哪些
Article.objects.all().exists()                                         #检查 Article 中是否有对象
Article.objects.count()                                                #来查询数量
#替换用filter .update(name='nnn')
a=Article.objects.filter(id="12")
a.update(score="0")


#select_related ##############     <<<优化一对一，多对一查询>>>>     
Article.objects.all()[:10][1].author.name                          #同样达到目的,下面执行一句Sql语句
Article.objects.all().select_related('author')[:10][0].author.name #查询前10文章中第一的作者名
a=Article.objects.all().select_related('author')[:10][0]
a.title                                                            #不执行sql语句（优化）
#prefetch_related ##############     <<<优化一对多，多对多查询>> 
Article.objects.all().prefetch_related('tags')[:10][0].tags.all()[0].name   #查询标签名
a=Article.objects.all().prefetch_related('author')[:10][0]
a.title 

#extra 实现 别名，条件，排序等
Article.objects.filter(author="2").extra(select={"ti":"title"})
for i in a: print(i.ti)

#annotate 聚合 计数，求和，平均数等
from django.db.models import Count          #查询每个作者文章的数量
Article.objects.all().values('author__name').annotate(count=Count("author__name")).values_list("author__name","count")                                                
from django.db.models import Avg            #打分平均值
Article.objects.values('author_id').annotate(avg_score=Avg('score')).values('author__name', 'avg_score') 
from django.db.models import Sum            #打分和
Article.objects.values('author__name').annotate(sum_score=Sum('score')).values('author__name', 'sum_score')

#defer 排除不需要的字段
Article.objects.all().defer('content')
# only 仅选择需要的字段
Author.objects.all().only('name')



模型替换对象方法：
entry = Article.objects.get(pk=1)					#必须是单个
cheese_blog = Blog.objects.get(name="Cheddar Talk")
entry.blog = cheese_blog						    #对象自己定义
entry.save()

模型删除对象方法：
Article.objects.filter(name__contains="abc").delete() # 删除 名称中包含 "abc"的人
people = Article.objects.filter(name__contains="abc")
people.delete()
Article.objects.all().delete() 						 # 删除所有 Article 记录

模型更新对象方法：
Article.objects.filter(name__contains="abc").update(name='xxx') # 名称中包含 "abc"的人 都改成 xxx
a = Article.objects.get(name="WeizhongTu")
a.name="WeizhongTu"
a.save()  
											# 最后不要忘了保存！！！
可迭代的  比如：
a = Article.objects.all()                              #<<<<<for 循环 >>>>>>
for e in a:
    print(e.headline)
                            

用pickle序列化到硬盘再读取出来的
>>> import pickle
>>> s=pickle.dumps('abcdef')
>>> query = pickle.loads(s)     # 读取序化过的
>>> qs = MyModel.objects.all()
>>> qs.query = query            # 序列化过去

查询结果排序：
Author.objects.all().order_by('name')
Author.objects.all().order_by('-name') # 在 column name 前加一个负号，可以实现倒序

支持链式查询：
Author.objects.filter(name__contains="WeizhongTu").filter(email="tuweizhong@163.com")
Author.objects.filter(name__contains="Wei").exclude(email="tuweizhong@163.com")
# 找出名称含有abc, 但是排除年龄是23岁的
Article.objects.filter(name__contains="abc").exclude(age=23)

不支持负索引
Article.objects.all()[:10] 					#切片操作，前10条
Article.objects.all()[-10:] #				#会报错！！！
使用 reverse() 解决
Article.objects.all().reverse()[:2] 			#最后两条
Article.objects.all().reverse()[0] 			#最后一条
使用 order_by，在栏目名（column name）		#前加一个负号
Article.objects.order_by('-id')[:20] 		#id最大的20条

重复的问题，使用 .distinct() 去重
qs1 = Article.objects.filter(label__name='x')
qs2 = Article.objects.filter(reaction__name='A + B >> C')
qs3 = Article.objects.filter(inputer__name='aaaa')
# 合并到一起
qs = qs1 | qs2 | qs3
这个时候就有可能出现重复的
# 去重方法
qs = qs.distinct()
